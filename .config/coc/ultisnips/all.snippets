# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet cl "console.log()" b
console.log($1)
endsnippet

snippet im "CSS important" b
!important
endsnippet

snippet hc "HTML comment" b
<!-- $1 -->
endsnippet

snippet bc "Semi-transparent background color" b
background-color: rgba(0,0,0,0.25);
endsnippet
# let ${1:${VISUAL}} = require('${0:$1}');
snippet pdc "Augustin Pdef with CC" b
(
Pdef(\\${1:name}, Ppar(
	[
		Pbind ( // notes
			\type, \midi,
			\midicmd, \noteOn,
			\midiout, m,
			\chan, ${2:0},
			\midinote, Pfunc({${3:60}},inf),
			\amp, ${4:0.2},
			\stretch, 4*60/${5:120}, 
			\dur, ${6:1/4},
			\sustain, ${7:Pkey(\dur) * 2},
		),
		Pbind (
			\type, \midi, \midicmd, \control, \midiout, m, \chan, $2,
		) <>
		Ppar(
			[
				// volume 
				Pbind ( \ctlNum, 7, \control, ${8:64}, \dur, $6, \stretch, 4*60/$5),
				// decay 
				Pbind ( \ctlNum, 14, \control, ${9:64}, \dur, $6, \stretch, 4*60/$5),
				// pan
				Pbind ( \ctlNum, 10, \control, ${10:64}, \dur, $6, \stretch, 4*60/$5),
			], inf
		)
	], inf)
).play.quant_(${11:4*60/$5})
);

Pdef(\\$1).stop;

endsnippet

snippet pd "Augustin Pdef" b
(
Pdef(\\${1:name},
		Pbind ( // notes
			\type, \midi,
			\midicmd, \noteOn,
			\midiout, m,
			\chan, ${2:0},
			\midinote, Pfunc({${3:60}},inf),
			\amp, ${4:0.2},
			\stretch, 4*60/${5:120}, 
			\dur, ${6:1/4},
			\sustain, ${7:Pkey(\dur) * 2},
		)
).play.quant_(${11:4*60/$5})
);

Pdef(\\$1).stop;

endsnippet

snippet sd "Simple SynthDef" b
(
SynthDef(\\${1:blip}, {
	| freq=${2:440}, amp=$53:0.2}, auxAmp=${4:0.0}, att=0.00001, rel=1.0, pan=0.0, out=0, auxOut=0 |
	var sig, env;
	sig = SinOsc.ar(freq);
	env = Env.perc(att, rel).kr(2);
	sig = sig * env;
	sig = Pan2.ar(sig, pan);
	Out.ar(out, sig * amp);
	Out.ar(auxOut, sig * auxAmp);
}).add;
);

x = Synth(\\$1);
endsnippet

snippet test "Test SuperCollider audio" b
{SinOsc.ar(freq: 440.0,  phase: 0.0,  mul: 0.2,  add: 0.0)!2}.play;
endsnippet

# snippets from
# https://github.com/hlissner/vim-ultisnips-snippets/blob/master/snips/javascript.snippets

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:args}) {
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

# snippet for "for (...) {...} (faster)"
# for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--){
#	# ${3:$1[$2]}$0
# }
# endsnippet

snippet for "for loop"
for (${2:i}=0;$2<${1:array}.length;$2++){
	${3:$1[$2]}$0
}
endsnippet

snippet foreach "foreach loop"
for (var ${key} in ${items}) {
	$0
}
endsnippet

snippet while "while loop"
while (${1:true}) {
	$0
}
endsnippet

snippet do "do-while loop"
do {
	$0
} while (${1:true});
endsnippet

snippet function "function (fun)"
function ${1:function_name} (${2:argument}) {
	${0:// body...}
}
endsnippet

snippet if "if"
if (${1:true}) {
	$0
}
endsnippet

snippet else "else"
} else {
endsnippet

snippet elseif "else if"
} else if (${1:true}) {
endsnippet

snippet switch "Switch statement"
switch (${1:value}) {
	$0
}
endsnippet

snippet case "Switch-case"
case ${1:condition}:
	$0
	break;
endsnippet

snippet default "Switch-default"
default:
	$0
	break;
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {$0}${2:}, ${1:10});
endsnippet

snippet class "Create an object"
function ${1:ClassName}($2) {
	$3
}

${4:// Extends $5
$1.prototype = Object.create(${5:parentClass}.prototype);}
$1.prototype = {
	constructor: $1,

	// Methods
	$0
}
endsnippet

snippet prototype "Object method"
${1:className}.prototype.${2:name}
endsnippet

snippet var "Variable declaration"
var ${1:varName} = ${2:value};
endsnippet
