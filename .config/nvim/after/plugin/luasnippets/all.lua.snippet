s( {trig = "AY.categories", name = "AY.categories",  }, {t("AY.categories"),t("("),t(":"),i(1, "nil"), t("))"),}),

s( { trig = "cl", name = "console.log()" }, {
t("console.log("),
i(1),
t(")"),
endsnippet

s( { trig = "im", name = "CSS important" }, {
t("!important"),
endsnippet

s( { trig = "hc", name = "HTML comment" }, {
t("<!-- "),
i(1),
t(" -->"),
endsnippet

s( { trig = "bc", name = "Semi-transparent background color" }, {
t("background-color: rgba(0,0,0,0.25);"),
endsnippet
t("# let "),
i(1, "
i(),
t("{VISUAL"),"),
t("} = require('"),
i(0, "
i(1),
t(""),"),
t("');"),
s( { trig = "pdc", name = "Augustin Pdef with CC" }, {
t("("),
t("Pdef(\\"),
i(1, "name"),
t(", Ppar("),
t("	["),
t("		Pbind ( // notes"),
t("			\type, \midi,"),
t("			\midicmd, \noteOn,"),
t("			\midiout, m,"),
t("			\chan, "),
i(2, "0"),
t(","),
t("			\midinote, Pfunc({"),
i(3, "60"),
t("},inf),"),
t("			\amp, "),
i(4, "0.2"),
t(","),
t("			\stretch, 4*60/"),
i(5, "120"),
t(","),
t("			\dur, "),
i(6, "1/4"),
t(","),
t("			\sustain, "),
i(7, "Pkey(\dur) * 2"),
t(","),
t("		),"),
t("		Pbind ("),
t("			\type, \midi, \midicmd, \control, \midiout, m, \chan, "),
i(2),
t(","),
t("		) <>"),
t("		Ppar("),
t("			["),
t("				// volume"),
t("				Pbind ( \ctlNum, 7, \control, "),
i(8, "64"),
t(", \dur, "),
i(6),
t(", \stretch, 4*60/"),
i(5),
t("),"),
t("				// decay"),
t("				Pbind ( \ctlNum, 14, \control, "),
i(9, "64"),
t(", \dur, "),
i(6),
t(", \stretch, 4*60/"),
i(5),
t("),"),
t("				// pan"),
t("				Pbind ( \ctlNum, 10, \control, "),
i(10, "64"),
t(", \dur, "),
i(6),
t(", \stretch, 4*60/"),
i(5),
t("),"),
t("			], inf"),
t("		)"),
t("	], inf)"),
t(").play.quant_("),
i(11, "4*60/
i(5),
t(""),"),
t(")"),
t(");"),

t("Pdef(\\"),
i(1),
t(").stop;"),

endsnippet

s( { trig = "pd", name = "Augustin Pdef" }, {
t("("),
t("Pdef(\\"),
i(1, "name"),
t(","),
t("		Pbind ( // notes"),
t("			\type, \midi,"),
t("			\midicmd, \noteOn,"),
t("			\midiout, m,"),
t("			\chan, "),
i(2, "0"),
t(","),
t("			\midinote, Pfunc({"),
i(3, "60"),
t("},inf),"),
t("			\amp, "),
i(4, "0.2"),
t(","),
t("			\stretch, 4*60/"),
i(5, "120"),
t(","),
t("			\dur, "),
i(6, "1/4"),
t(","),
t("			\sustain, "),
i(7, "Pkey(\dur) * 2"),
t(","),
t("		)"),
t(").play.quant_("),
i(11, "4*60/
i(5),
t(""),"),
t(")"),
t(");"),

t("Pdef(\\"),
i(1),
t(").stop;"),

endsnippet

t("# snippet sd "Simple SynthDef" b"),
t("# ("),
t("# SynthDef(\\"),
i(1, "blip"),
t(", {"),
t("# | freq="),
i(2, "440"),
t(", amp="),
i(53),
t(":0.2}, auxAmp="),
i(4, "0.0"),
t(", att=0.00001, rel=1.0, pan=0.0, out=0, auxOut=0 |"),
t("# var sig, env;"),
t("# sig = SinOsc.ar(freq);"),
t("# env = Env.perc(att, rel).kr(2);"),
t("# sig = sig * env;"),
t("# sig = Pan2.ar(sig, pan);"),
t("# Out.ar(out, sig * amp);"),
t("# Out.ar(auxOut, sig * auxAmp);"),
t("# }).add;"),
t("# );"),

t("# x = Synth(\\"),
i(1),
t(");"),
# endsnippet

s( { trig = "pbd", name = "Augustin Pbindef" }, {
t("("),
t("Pbindef(\\"),
i(1, "sines"),
t(","),
t("	\instrument, \\"),
i(2, "sine"),
t(","),
t("	\amp, "),
i(3, "0.2"),
t(","),
t("	\stretch, 4*60/"),
i(4, "120"),
t(","),
t("	\dur, "),
i(5, "1/4"),
t(","),
t("	\rel, 4,"),
t("	// \degree, Pfunc{~notes.next},"),
t("	// \scale, Pfunc{~scale},"),
t("	// \octave, 5,"),
t("	// \root, Pfunc{~root % 12},"),
t("	// \amp, Pfunc{~mix[\sines] / 2} ,"),
t("	\out, ~masterBus,"),
t("	\auxOut, ~reverbBus,"),
t("	\pan, 0,"),
t("	\group, ~sourceGroup,"),
t(").play.quant_("),
i(6, "4*60/
i(4),
t(""),"),
t(")"),
t(");"),

t("Pbindef(\\"),
i(1),
t(").stop;"),
endsnippet

s( { trig = "sd", name = "Simple Synth" }, {
t("("),
t("SynthDef(\\"),
i(1, "blip"),
t(", {"),
t("	var sig, env;"),
t("	sig = SinOsc.ar(\freq.kr("),
i(2, "440"),
t("));"),
t("	env = Env.perc(\att.kr(0.00001), \rel.kr(1.0)).kr(2);"),
t("	sig = sig * env;"),
t("	sig = Pan2.ar(sig, \pan.kr(0));"),
t("	Out.ar(\out.kr(0), sig * \amp.kr("),
i(3, "0.2"),
t("));"),
t("	Out.ar(\auxOut.kr(0), sig * \auxAmp.kr("),
i(4, "0.0"),
t("));"),
t("}).add;"),
t(");"),

t("x = Synth(\\"),
i(1),
t(");"),
endsnippet

s( { trig = "test", name = "Test SuperCollider audio" }, {
t("{SinOsc.ar(freq: 440.0,  phase: 0.0,  mul: 0.2,  add: 0.0)!2}.play;"),
endsnippet

t("# snippets from"),
t("# https://github.com/hlissner/vim-ultisnips-snippets/blob/master/snips/javascript.snippets"),

s( { trig = "get", name = "Get Elements" }, {
t("getElement"),
i(),
t("{1/(T)|.*/(?1:s)/}By"),
i(1, "T"),

i(),
t("{1/(T)|(I)|.*/(?1:agName)(?2:d)/}('"),
i(2),
t("')"),
endsnippet

s( { trig = "'':f", name = "object method string" }, {
t("'"),
i(1, "
i(),
t("{2:#thing"),"),
t(":"),
i(3, "click"),
t("}': function(element) {"),
t("	"),
i(0),

t("}"),
i(10, ","),

endsnippet

s( { trig = ":f", name = "Object Method" }, {

i(1, "method_name"),
t(": function("),
i(3, "args"),
t(") {"),
t("	"),
i(0),

t("}"),
i(10, ","),

endsnippet

s( { trig = ":,", name = "Object Value JS" }, {

i(1, "value_name"),
t(": "),
i(0, "value"),
t(","),
endsnippet

s( { trig = ":", name = "Object key key: 'value'" }, {

i(1, "key"),
t(": "),
i(2, ""
i(),
t("{3:value"),"),
t(""}"),
i(4, ", "),

endsnippet

t("# snippet for "for (...) {...} (faster)""),
t("# for (var "),
i(2, "i"),
t(" = "),
i(1, "Things"),
t(".length - 1; "),
i(2),
t(" >= 0; "),
i(2),
t("--){"),
t("#	# "),
i(3, "
i(1),
t("["),
i(2),
t("]"),"),

i(0),

t("# }"),
# endsnippet

s( { trig = "for", name = "for loop" }, {
t("for ("),
i(2, "i"),
t("=0;"),
i(2),
t("<"),
i(1, "array"),
t(".length;"),
i(2),
t("++){"),
t("	"),
i(3, "
i(1),
t("["),
i(2),
t("]"),"),

i(0),

t("}"),
endsnippet

s( { trig = "foreach", name = "foreach loop" }, {
t("for (var "),
i(),
t("{key} in "),
i(),
t("{items}) {"),
t("	"),
i(0),

t("}"),
endsnippet

s( { trig = "while", name = "while loop" }, {
t("while ("),
i(1, "true"),
t(") {"),
t("	"),
i(0),

t("}"),
endsnippet

s( { trig = "do", name = "do-while loop" }, {
t("do {"),
t("	"),
i(0),

t("} while ("),
i(1, "true"),
t(");"),
endsnippet

s( { trig = "function", name = "function (fun)" }, {
t("function "),
i(1, "function_name"),
t(" ("),
i(2, "argument"),
t(") {"),
t("	"),
i(0, "// body..."),

t("}"),
endsnippet

s( { trig = "if", name = "if" }, {
t("if ("),
i(1, "true"),
t(") {"),
t("	"),
i(0),

t("}"),
endsnippet

s( { trig = "else", name = "else" }, {
t("} else {"),
endsnippet

s( { trig = "elseif", name = "else if" }, {
t("} else if ("),
i(1, "true"),
t(") {"),
endsnippet

s( { trig = "switch", name = "Switch statement" }, {
t("switch ("),
i(1, "value"),
t(") {"),
t("	"),
i(0),

t("}"),
endsnippet

s( { trig = "case", name = "Switch-case" }, {
t("case "),
i(1, "condition"),
t(":"),
t("	"),
i(0),

t("	break;"),
endsnippet

s( { trig = "default", name = "Switch-default" }, {
t("default:"),
t("	"),
i(0),

t("	break;"),
endsnippet

s( { trig = "timeout", name = "setTimeout function" }, {
t("setTimeout(function() {"),
i(0),
t("}"),
i(2, ""),
t(", "),
i(1, "10"),
t(");"),
endsnippet

s( { trig = "class", name = "Create an object" }, {
t("function "),
i(1, "ClassName"),
t("("),
i(2),
t(") {"),
t("	"),
i(3),

t("}"),


i(),
t("{4:// Extends "),
i(5),


i(1),
t(".prototype = Object.create("),
i(5, "parentClass"),
t(".prototype);}"),

i(1),
t(".prototype = {"),
t("	constructor: "),
i(1),
t(","),

t("	// Methods"),
t("	"),
i(0),

t("}"),
endsnippet

s( { trig = "prototype", name = "Object method" }, {

i(1, "className"),
t(".prototype."),
i(2, "name"),

endsnippet

s( { trig = "var", name = "Variable declaration" }, {
t("var "),
i(1, "varName"),
t(" = "),
i(2, "value"),
t(";"),
endsnippet
