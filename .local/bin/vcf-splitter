#!/usr/bin/env python3

import argparse
import fnmatch
import hashlib
import os
import pathlib

def split_vcf(fpath, content_filter=None, add_uid=False):
    """
    split_vcf: splits the content of a vcf file into a list of strings, each string containing a single VCARD entry.
    @fpath: an opened vcf file
    @content_filter: an optional string containing the required content
    """
    l = []
    content = ""
    for line in fpath:
        content += line
        if line.find("END:VCARD") == 0:
            if (
                content_filter is None
                or content_filter is not None
                and content_filter in content
            ):
                if add_uid and not "UID:" in content:
                    i = content.find("END:VCARD")
                    content = (
                        content[:i]
                        + "UID:{}\n".format(hashlib.md5(content.encode()).hexdigest())
                        + content[i:]
                    )
                l.append(content)
            content = ""
    return l

def write_vcard(vcard, outdir):
    """
    write_vcard: writes the content of a vcard into the next available file name
    """
    with open(next_filename(outdir), "w") as out:
        if out.write(vcard) != len(vcard):
            return False
    return True

def next_filename(directory):
    """
    next_filename: returns the next available file name in the given directory.
    @directory: the path of the directory to check

    This function gets the number of files in the directory and returns the next available path
    in the form "{directory}/{integer}.vcf"
    """
    n = len(fnmatch.filter(os.listdir(directory), "*.vcf")) + 1
    while True:
        filename = directory.joinpath(f"{n}.vcf")
        if not filename.exists():
            return filename
        n += 1

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="A small script for splitting multi-entry vcf files into single entry files.",
        epilog="""
The single entry file names are generated with the position of the file or
using the content of the output directory.
    """,
    )

    parser.add_argument(
        "input_files", help="list of input files in VCARD format", nargs="+"
    )
    parser.add_argument(
        "-o",
        "--outdir",
        help="output directory to extract the files",
        required=True,
        # nargs=1,
        type=pathlib.Path,
    )
    parser.add_argument(
        "-f",
        "--filter",
        help=f"filter the entries containing %(metavar)s",
        metavar="STRING",
        required=False,
    )
    parser.add_argument(
        "-u",
        "--uid",
        help="add a UID field to the entry if missing",
        action="store_true",
        default=False,
    )

    args = parser.parse_args()

    if not args.outdir.exists():
        parser.error("Output directory {} does not exist".format(args.outdir))
    elif not args.outdir.is_dir():
        parser.error(
            "Requested output directory {} is not a directory".format(args.outdir)
        )

    count = 0
    for f in args.input_files:
        with open(f) as f:
            for vcard in split_vcf(f, args.filter, args.uid):
                if write_vcard(vcard, args.outdir):
                    count += 1

    print(
        "Split {} input file(s) into {} single entry file(s)".format(
            len(args.input_files), count
        )
    )
