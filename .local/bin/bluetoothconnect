#!/usr/bin/env bash

device=$1

if [[ $(pactl list sinks | grep -i "Bluetooth") ]]; then
	echo "Device is connected"
	notify-send "Device is connected"
	exit 0
fi

powerOnAndConnect() {
	[[ $(bluetoothctl show | awk '/Powered/ {print $2}') == "no" ]] && notify-send "Bluetooth controller is not powered" && rfkill unblock bluetooth && bluetoothctl power on && notify-send "Bluetooth controller powered on"
	bluetoothctl connect $device && notify-send "Connection successful"
	# sleep 2
	# [[ $? ]] && notify-send "Connection successful"
}

powerOnAndConnect

# SUDO_ASKPASS=~/.local/bin/dmenupass sudo -A rfkill unblock bluetooth && powerOnAndConnect
# rfkill unblock bluetooth && powerOnAndConnect

# If we're still running the script, something went wrong and we have to resort to reconnecting the device.
# Doing this in a tmux session running in the background.
# For some reason the bluetoothctl scan doesn't work properly in the background

# continue=$(echo -e "Yes\nNo" | dmenu -p "Do you want to reconnect the device?")
# [[ $continue != "Yes" ]] && echo "Quitting" && notify-send "Quitting" && exit 1
# pairing=$(echo -e "Yes\nNo" | dmenu -p "Confirm that your device is in pairing mode")
# [[ $pairing != "Yes" ]] && echo "Quitting" && notify-send "Quitting" && exit 1
#
# echo "Starting tmux session bluetooth"
# notify-send "Starting tmux session bluetooth"
# tmux new-session -s bluetooth -d
# echo "Starting bluetoothctl"
# notify-send "Starting bluetoothctl"
# tmux send-keys C-c
# sleep 1
# tmux send-keys "bluetoothctl" Enter
# echo "Removing device"
# notify-send "Removing device"
# tmux send-keys "remove $device" Enter
# echo "Scanning for devices"
# notify-send "Scanning for devices"
# tmux send-keys "scan on" Enter
# echo "3 second wait to allow for devices to be shown"
# notify-send "3 second wait to allow for devices to be shown"
# sleep 3
# echo "trusting device"
# notify-send "trusting device"
# tmux send-keys "trust $device" Enter
# sleep 1
# echo "Pairing device"
# notify-send "Pairing device"
# tmux send-keys "pair $device" Enter
# sleep 1
# echo "Connecting device"
# notify-send "Connecting device"
# tmux send-keys "connect $device" Enter
# echo "5 second wait to allow for device to connect"
# notify-send "5 second wait to allow for device to connect"
# sleep 5
# echo "Killing the tmux session bluetooth"
# notify-send "Killing the tmux session bluetooth"
# tmux kill-session -t bluetooth
#
# if [[ $(grep -q $(bluetoothctl devices Connected) <<< "$device") ]]; then
# 	echo "Device reconnect succeeded"
# 	notify-send "Device reconnect succeeded"
# 	exit 0
# else
# 	echo "Device reconnect failed"
#   notify-send "Device reconnect failed"
#   exit 1
# fi

# # Function to check if a command exists
# command_exists() {
#     command -v "$1" &> /dev/null
# }
#
# # Ensure bluetoothctl and pactl commands are available
# if ! command_exists bluetoothctl || ! command_exists pactl; then
#     echo "Error: Required commands 'bluetoothctl' or 'pactl' are not available."
#     exit 1
# fi
#
# # Function to get the Bluetooth power status
# get_bluetooth_power_status() {
#     bluetoothctl show | grep -i powered | grep -i yes
# }
#
# # Function to check if the device is connected
# is_device_connected() {
#     local device_mac=$1
#     bluetoothctl info "$device_mac" | grep -q "Connected: yes"
# }
#
# # Function to connect to a Bluetooth device
# connect_bluetooth_device() {
#     local device_mac=$1
#     bluetoothctl connect "$device_mac"
# }
#
# # Function to restart Bluetooth service
# restart_bluetooth_service() {
#     SUDO_ASKPASS=~/.local/bin/dmenupass sudo -A systemctl restart bluetooth.service
#     bluetoothctl power on
# }
#
# # Function to set the audio profile
# set_audio_profile() {
#     local device_mac=$1
#     local mac_transformed=$(echo "$device_mac" | tr ":" "_")
#     pactl set-card-profile "bluez_card.$mac_transformed" a2dp-sink
# }
#
# # Function to unmute the audio
# unmute_audio() {
#     /home/$USER/.local/bin/unmute
# }
#
# # Main script starts here
# if [ -z "$1" ]; then
#     echo "Error: Missing MAC address as argument."
#     echo "Usage: $0 <MAC_ADDRESS>"
#     exit 1
# fi
#
# DEVICE_MAC=$1
#
# # Check if Bluetooth is powered on
# POWERED=$(get_bluetooth_power_status)
#
# if [[ -n $POWERED ]]; then
#     # Check if the device is already connected
#     if is_device_connected "$DEVICE_MAC"; then
#         echo "Device is already connected. Restarting Bluetooth service..."
#         restart_bluetooth_service && connect_bluetooth_device "$DEVICE_MAC"
#     else
#         echo "Bluetooth is powered but the device is not connected. Connecting..."
#         connect_bluetooth_device "$DEVICE_MAC"
#     fi
#     sleep 1
#     set_audio_profile "$DEVICE_MAC"
#     unmute_audio
# else
#     echo "Bluetooth is not powered. Powering on and connecting..."
#     bluetoothctl power on && connect_bluetooth_device "$DEVICE_MAC"
# fi
#
# # EVICE="${1:?Missing MAC address as argument}"
# # CONNECTED=$(bluetoothctl devices | cut -f2 -d' ' | while read uuid; do bluetoothctl info $uuid; done|grep -e "Connected" | awk '{print $NF}')
# # echo $CONNECTED
# # POWERED=$(bluetoothctl show | grep -i powered | grep -i yes)
# # if [[ $POWERED ]]; then
# #     if [[ $CONNECTED == yes ]]; then
# #         echo "Restarting bluetooth service"
# #         SUDO_ASKPASS=~/.local/bin/dmenupass sudo -A systemctl restart bluetooth.service && bluetoothctl power on && bluetoothctl -- connect $1
# #     else
# #         echo "Bluetooth powered but not connected"
# #         bluetoothctl -- connect $1
# #     fi
# #     sleep 1
# # 		MAC=$(echo $1 | tr ":" "_")
# #     pactl set-card-profile bluez_card.$MAC a2dp-sink
# # 		/home/$USER/.local/bin/unmute
# # else
# #     echo "Bluetooth not powered"
# #     bluetoothctl power on && bluetoothctl -- connect $1
# # fi
