#!/usr/bin/env bash

# Define the trash directory
XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
TRASH_DIR="$XDG_DATA_HOME/Trash"
FILES_DIR="$TRASH_DIR/files"
INFO_DIR="$TRASH_DIR/info"

# Create the directories if they do not exist
mkdir -p "$FILES_DIR"
mkdir -p "$INFO_DIR"

# Function to URL-encode strings
urlencode() {
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done
}

# Function to move a file to the trash and create an info file
move_to_trash() {
    local file_path=$(realpath "$1")
    local filename=$(basename "$file_path")
    local deletion_date=$(date +"%Y-%m-%dT%H:%M:%S")
    local trash_file="$FILES_DIR/$filename"
    local trashinfo_path=$(urlencode "$file_path")
    local count=0

    # Handle file name collisions
    while [[ -e "$trash_file" ]]; do
        ((count++))
        trash_file="$FILES_DIR/${filename}_${count}"
    done

    # Move the file to the trash files directory
    mv -f "$file_path" "$trash_file"

    # Handle errors during move
    if [[ $? -ne 0 ]]; then
        echo "Error moving file: $file_path"
        return 1
    fi

    # Create the info file
    local trashinfo_file="${filename}.trashinfo"
    [[ $count -ne 0 ]] && trashinfo_file="${filename}_${count}.trashinfo"
    echo "[Trash Info]" > "$INFO_DIR/$trashinfo_file"
    echo "Path=$trashinfo_path" >> "$INFO_DIR/$trashinfo_file"
    echo "DeletionDate=$deletion_date" >> "$INFO_DIR/$trashinfo_file"
}

# Process each file passed to the script
for file in "$@"; do
    if [[ -e "$file" ]]; then
        move_to_trash "$file"
    else
        echo "File not found: $file"
    fi
done
