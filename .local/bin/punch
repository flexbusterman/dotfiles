#!/bin/bash

programs=(neovim watson gawk sed libnotify)
for x in "${programs[@]}";do
	pacman -Qq "$x" >/dev/null 2>&1 || { echo -e "Program not found: $x\n"; notify-send "Program not found: $x";}
done

usage() {
	echo "Usage: punch [OPTIONS]"
	echo ""
	echo "A script to manage project time tracking with Watson."
	echo ""
	echo "Options:"
	echo ""
	echo "  -i, --in            Punch in the latest used project"
	echo "                      If no project is found, you will be prompted to enter one"
	echo ""
	echo "  -o, --out           Punch out of the current project"
	echo ""
	echo "  -s, --select        Select an existing project or start a new one"
	echo ""
	echo "  -d, --delete        Select an existing project to delete"
	echo ""
	echo "  -h, --help          Display this help message and exit"
	echo ""
}

getLatestProject() {
	if [ -f ~/.config/watson/latest ]; then
		latest=$(cat ~/.config/watson/latest)
	else
		latest=""
	fi
}

deleteProject() {
	project=$(watson projects | dmenu -p "Select project to delete: ")
	confirmation=$(echo -e "yes\nno" | dmenu -p "Delete $project?")
	if [ $confirmation == "yes" ]; then
		cp ~/.config/watson/frames ~/.config/watson/frames.beforedelete$(date +%s)
		cat ~/.config/watson/frames | awk -v search="\"$project\"" '$0 ~ search{for(x=NR-3;x<=NR+4;x++)d[x];}{a[NR]=$0}END{for(i=1;i<=NR;i++)if(!(i in d))print a[i]}' > ~/.config/watson/frames.temp
		mv ~/.config/watson/frames.temp ~/.config/watson/frames
		# nvim hack to fix json syntax if we removed the last entry, leaving trailing comma
		nvim -es +'silent! %s/],\n]/]\r]/g | wq' ~/.config/watson/frames
	else
		notify-send "Cancelled deletion of $project"
	fi
}

chooseProject() {
	latest=$(echo "" | dmenu -p "No recent project found. Enter project name:")
	if [ -n "$latest" ]; then
		echo "$latest" > ~/.config/watson/latest
	fi
}

checkWatsonRunning() {
	watson_status=$(watson status 2>&1)
	if echo "$watson_status" | grep -q "Project"; then
		echo "$watson_status"
		notify-send "$watson_status"
		return 1
	else
		return 0
	fi
}

selectProject() {
	# Get the list of projects, skip the first line, and pass to dmenu
	project=$(watson projects | tail -n +2 | dmenu -p "Select or enter project name:")

	# If a project was selected or entered
	if [ -n "$project" ]; then
		# Save the project as the latest used
		echo "$project" > ~/.config/watson/latest
		# Start the project with Watson
		if watson start "$project"; then
			echo "Started project $project"
			notify-send "Started project $project"
		else
			echo "Failed to start project $project"
			notify-send "Failed to start project $project"
		fi
	else
		echo "No project name entered"
		notify-send "No project name entered"
	fi
}

getElapsedTimeForProject() {
	project_name=$1
	# Use watson report to get the detailed report, and grep for the specific project name
	elapsed_time=$(watson report --current | grep -P "(?<=^|\s)$project_name\s+-\s+" | awk -F '- ' '{print $2}' | sed 's/^ *//;s/ *$//')
	echo "$elapsed_time"
}

[[ $1 == "" ]] && usage

while [ "$1" != "" ]; do
	case $1 in
		-i | --in)
			shift
			checkWatsonRunning
			if [ $? -eq 0 ]; then
				getLatestProject
				if [ -z "$latest" ]; then
					chooseProject
				fi
				if [ -n "$latest" ]; then
					if watson start "$latest"; then
						echo "Punched in $latest"
						notify-send "Punched in $latest"
					else
						echo "Failed to punch in $latest"
						notify-send "Failed to punch in $latest"
					fi
				else
					echo "No project selected"
					notify-send "No project selected"
				fi
			fi
			;;
		-o | --out)
			shift
			getLatestProject
			if [ -z "$latest" ]; then
				echo "No project to punch out from"
				notify-send "No project to punch out from"
			else
				if watson stop; then
					echo "Punched out from $latest"
					notify-send "Punched out from $latest"
					elapsed_time=$(getElapsedTimeForProject "$latest")
					if [ -n "$elapsed_time" ]; then
						notify-send "Total project time:" "$elapsed_time"
					else
						notify-send "Unable to determine total time clocked"
					fi
				else
					# echo "Failed to punch out from $latest"
					# notify-send "Failed to punch out from $latest"
					watson status
					notify-send "$(watson status)"
				fi
			fi
			;;
		-s | --select)
			shift
			checkWatsonRunning
			if [ $? -eq 0 ]; then
				selectProject
			fi
			;;
		-d | --delete)
			shift
			deleteProject
			;;
		-h | --help)
			usage
			;;
		*)
			usage
			exit 1
			;;
	esac
	shift
done
