#!/bin/bash

validArguments=("bar" "gaps" "focus")

showGaps () {
	echo "true" > ~/.config/i3/gaps
	i3-msg gaps inner all set 24
	i3-msg gaps outer all set 0
}

hideGaps () {
	i3-msg gaps inner all set 0
	i3-msg gaps outer all set 0
	echo "false" > ~/.config/i3/gaps
}

showBar () {
	pidof polybar || polybar mybar -c $HOME/.config/polybar/config.ini 2>&1 | tee -a /tmp/polybar.log & disown
	polybar-msg cmd show
	echo "true" > ~/.config/i3/bar
}

hideBar () {
	polybar-msg cmd hide
	echo "false" > ~/.config/i3/bar
}

# check if argument is valid
if [[ " ${validArguments[*]} " =~ " $1 " ]]; then
	# if file for argument doesnt exist
	if [ ! -f "/home/$USER/.config/i3/$1" ]; then
		echo "create file for argument containing true"
		echo "true" > /home/$USER/.config/i3/$1
	fi
else
	echo "Argument has to be bar, gaps or focus"
	exit 1
fi

case $1 in
	bar)
		bar=$(cat /home/$USER/.config/i3/bar | while read line; do echo $line; done)
		if [[ $bar == "true" ]]; then
			hideBar
		else
			showBar
		fi
		;;

	gaps)
		gaps=$(cat /home/$USER/.config/i3/gaps | while read line; do echo $line; done)
		if [[ $gaps == "true" ]]; then
			hideGaps
		else
			showGaps
		fi
		;;

	focus)
		bar=$(cat /home/$USER/.config/i3/bar | while read line; do echo $line; done)
		gaps=$(cat /home/$USER/.config/i3/gaps | while read line; do echo $line; done)
		if [[ $gaps == "true" ]] && [[ $bar == "false" ]]; then
			hideGaps
			showBar
		else
			showGaps
			hideBar
		fi
		;;

	*)
		echo -n "Unknown argument, this code should not be run"
		exit 1
		;;
esac
