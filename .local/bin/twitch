#!/usr/bin/env bash

# Define streaming parameters
INRES=$(xrandr | grep '*' | awk '{print $1}') # Dynamically set input resolution
OUTRES=$(xrandr | grep '*' | awk '{print $1}') # Dynamically set output resolution
FPS="15" # Target FPS
GOP="30" # i-frame interval, should be double of FPS
GOPMIN="15" # Min i-frame interval, should be equal to FPS
THREADS="2" # Max 6
CBR="1000k" # Constant bitrate (should be between 1000k - 3000k)
QUALITY="ultrafast" # FFMPEG preset
AUDIO_RATE="44100"
STREAM_KEY="$1" # Stream key for Twitch

# List available input devices, include "None" option, and ensure all input devices are captured
echo -e "None\n$(pactl list sources short | awk '/alsa_input/ || /bluez_input/ {print $2}')" > /tmp/available_inputs.txt

# Use dmenu to let the user select an input device
SELECTED_INPUT=$(cat /tmp/available_inputs.txt | dmenu -i -p "Select Input Device:")

# If dmenu is canceled (Escape pressed), exit the script
if [ $? -ne 0 ]; then
    echo "Selection canceled."
    exit 1
fi

# Load PulseAudio module for a virtual sink
SINK_NAME="combined"
SINK_ID=$(pactl load-module module-null-sink sink_name=$SINK_NAME)

# Initialize an array to store module IDs for cleanup
MODULE_IDS=()

# Function to unload modules on exit
function cleanup {
  echo "Unloading PulseAudio modules..."
  for MODULE_ID in "${MODULE_IDS[@]}"; do
    pactl unload-module $MODULE_ID
  done
  pactl unload-module $SINK_ID
}

# Trap SIGINT and SIGTERM to ensure cleanup is executed on script exit
trap cleanup EXIT

# Conditional setup based on selected input
if [ "$SELECTED_INPUT" != "None" ]; then
  MODULE_ID=$(pactl load-module module-loopback source="$SELECTED_INPUT" sink=$SINK_NAME)
  MODULE_IDS+=($MODULE_ID)
fi

# Start streaming with ffmpeg using the combined monitor as the audio input
ffmpeg -f x11grab -s "$INRES" -r "$FPS" -i :0.0 -f pulse -i ${SINK_NAME}.monitor -f flv -ac 2 -ar $AUDIO_RATE \
  -vcodec libx264 -g $GOP -keyint_min $GOPMIN -b:v $CBR -minrate $CBR -maxrate $CBR -pix_fmt yuv420p \
  -s $OUTRES -preset $QUALITY -tune film -acodec libmp3lame -threads $THREADS -strict normal \
  -bufsize $CBR "rtmp://arn03.contribute.live-video.net/app/$STREAM_KEY"

# ffmpeg -f x11grab -s "$INRES" -r "$FPS" -i :0.0 -f alsa -i pulse -f flv -ac 2 -ar $AUDIO_RATE \
# 	-vcodec libx264 -g $GOP -keyint_min $GOPMIN -b:v $CBR -minrate $CBR -maxrate $CBR -pix_fmt yuv420p\
# 	-s $OUTRES -preset $QUALITY -tune film -acodec libmp3lame -threads $THREADS -strict normal \
# 	-bufsize $CBR "rtmp://arn03.contribute.live-video.net/app/$STREAM_KEY"
