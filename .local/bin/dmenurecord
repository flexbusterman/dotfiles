#!/bin/sh

# Usage:
# `$0`: Ask for recording type via dmenu
# `$0 screencast`: Record both audio and screen
# `$0 video`: Record only screen
# `$0 audio`: Record only audio
# `$0 kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.

getdim() { xrandr | sed -n "s/\s*\([0-9]\+x[0-9]\+\).*\*.*/\1/p" ;}

updateicon() {
	echo "$1" > /tmp/recordingicon
	pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
}

killrecording() {
	recpid="$(cat /tmp/recordingpid)"
	kill -15 "$recpid"
	rm -f /tmp/recordingpid
	updateicon ""
	pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
}

# Uses the default input as audio
screencastinput() { \
	ffmpeg -y \
	-f x11grab \
	-framerate 30 \
	-s "$(getdim)" \
	-i "$DISPLAY" \
	-r 24 \
	-use_wallclock_as_timestamps 1 \
	-f alsa -thread_queue_size 1024 -i default \
	-c:v h264 \
	-crf 0 -preset ultrafast -c:a aac \
	"$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
	updateicon "‚è∫Ô∏èüéôÔ∏è"
}

# uses the default output as audio
screencastoutput() {
	default_monitor=$(pactl list short sources | grep "$(pactl info | grep "Default Sink" | cut -d' ' -f3).monitor" | cut -f2)
	ffmpeg -y \
		-f x11grab \
		-framerate 30 \
		-s "$(getdim)" \
		-i "$DISPLAY" \
		-f pulse -thread_queue_size 1024 -i "$default_monitor" \
		-c:v h264 \
		-crf 0 -preset ultrafast -c:a aac \
		"$HOME/screencast-output-$(date '+%y%m%d-%H%M-%S').mkv" &
			echo $! > /tmp/recordingpid
			updateicon "‚è∫Ô∏èüîä"
		}

# uses the default output as lossless audio
screencastoutputflac() {
default_monitor=$(pactl list short sources | grep "$(pactl info | grep "Default Sink" | cut -d' ' -f3).monitor" | cut -f2)
ffmpeg -y \
-f x11grab \
-framerate 30 \
-s "$(getdim)" \
-i "$DISPLAY" \
-f pulse -thread_queue_size 1024 -i "$default_monitor" \
-c:v h264 \
-crf 0 -preset ultrafast -c:a flac \
"$HOME/screencast-output-flac-$(date '+%y%m%d-%H%M-%S').mkv" &
echo $! > /tmp/recordingpid
updateicon "‚è∫Ô∏èüîä"
}

video() { ffmpeg \
-f x11grab \
-framerate 30 \
-s "$(getdim)" \
-i "$DISPLAY" \
-c:v libx264 -qp 0 -r 30 \
"$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
	echo $! > /tmp/recordingpid
	updateicon "‚è∫Ô∏è"
}

webcamhidef() {
ffmpeg -y \
-f v4l2 -framerate 30 -video_size 1280x720 -i /dev/video0 \
-f pulse -ac 2 -i default \
-c:v h264 -crf 0 -preset ultrafast -c:a aac \
-filter_complex "[0:v]split=2[rec][prev]" \
-map "[rec]" -map 1:a "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" \
-map "[prev]" -c:v rawvideo -pix_fmt yuv420p -f sdl "SDL output" &
	echo $! > /tmp/recordingpid
	updateicon "üé•"
}

webcam() { ffmpeg \
-f v4l2 \
-i /dev/video0 \
-f pulse -ac 2 -i default \
-video_size 640x480 \
-filter_complex "[0:v]split=2[rec][prev]" \
-map "[rec]" -map 1:a "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" \
-map "[prev]" -c:v rawvideo -pix_fmt yuv420p -f sdl "SDL output" &
	echo $! > /tmp/recordingpid
	updateicon "üé•"
}

audio() { \
ffmpeg \
-f alsa -i default \
-c:a flac \
"$HOME/audio-$(date '+%y%m%d-%H%M-%S').flac" &
	echo $! > /tmp/recordingpid
	updateicon "üéôÔ∏è"
}

askrecording() { \
choice=$(printf "screencast input\\nscreencast output\\nscreencast output FLAC\\nvideo\\nvideo selected\\naudio\\nwebcam\\nwebcam (hi-def)" | dmenu -i -p "Select recording style:")
case "$choice" in
"screencast input") screencastinput;;
"screencast output") screencastoutput;;
"screencast output FLAC") screencastoutputflac;;
audio) audio;;
video) video;;
*selected) videoselected;;
webcam) webcam;;
"webcam (hi-def)") webcamhidef;;
esac
}

asktoend() { \
response=$(printf "No\\nYes" | dmenu -i -p "Recording still active. End recording?") &&
[ "$response" = "Yes" ] &&  killrecording
}

videoselected()
{
slop -f "%x %y %w %h" > /tmp/slop
read -r X Y W H < /tmp/slop
rm /tmp/slop

ffmpeg \
-f x11grab \
-framerate 30 \
-video_size "$W"x"$H" \
-i :0.0+"$X,$Y" \
-c:v libx264 -qp 0 -r 30 \
"$HOME/box-$(date '+%y%m%d-%H%M-%S').mkv" &
echo $! > /tmp/recordingpid
updateicon "‚è∫Ô∏è"
}

while getopts ":dk" option; do
	case $option in
		d)
			screencastoutputflac
			exit;;
		k)
			killrecording
			exit;;
		\?) # Invalid option
			echo "Error: Invalid option - Valid options:"
			echo "-d Default screencast to FLAC"
			echo "-k Kill active recording"
			exit;;
	esac
done

case "$1" in
screencast) screencast;;
audio) audio;;
video) video;;
*selected) videoselected;;
kill) killrecording;;
*) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording;;
esac
